var nodePortCheck = (function () {
    function nodePortCheck(options, callback) {
        this.net = require('net');
        this.defaultOptions = {
            host: '0.0.0.0',
            port: 80,
            output: false,
            maxRetries: 10
        };
        this.options = {};
        this.server = {};
        this.retryServer = 0;
        this.portAvailable = false;
        this.savePorts = [];
        this.port = 0;
        this.ports = [];
        this.isServerBound = false;
        this.serverErrors = ['EADDRINUSE', 'EADDRNOTAVAIL', 'EACCES'];
        this.options = Object.assign({}, this.defaultOptions, options);
        if (typeof this.options.port !== 'object' && this.options.port.length !== 0) {
            this.ports.push(this.options.port);
        }
        else {
            this.ports = this.options.port;
        }
        this.savePorts = JSON.stringify(this.options.port);
        this.callback = callback;
        this.createServer();
    }
    nodePortCheck.prototype.setCurrentPort = function () {
        this.port = this.ports[0];
        this.ports.shift();
        this.retryServer = 0;
    };
    nodePortCheck.prototype.output = function () {
        var input = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            input[_i] = arguments[_i];
        }
        if (this.options.hasOwnProperty('output') && this.options.output === true) {
            console.log.apply(this, arguments);
        }
    };
    nodePortCheck.prototype.canRetry = function () {
        var status;
        if (+this.options.maxRetries > 0 && +this.options.maxRetries === this.retryServer || this.options.maxRetries === 0) {
            this.output("Maximum retries were reached for port", this.port - this.options.maxRetries);
            if (this.ports.length === 0) {
                this.finalCallback();
                status = false;
            }
            else {
                this.createServer();
            }
        }
        else {
            +this.port++;
            +this.retryServer++;
            this.output('Server retry attempt #' + this.retryServer + " at", this.getHostAndPort());
            status = true;
        }
        if (Object.keys(this.server).length) {
            this.server.close();
        }
        return status;
    };
    nodePortCheck.prototype.finalCallback = function () {
        var _this = this;
        setTimeout(function () {
            _this.callback(_this.portAvailable, +_this.port, JSON.parse(_this.savePorts));
        }, 3000);
    };
    nodePortCheck.prototype.getHostAndPort = function () {
        return this.options.host + ':' + this.port;
    };
    nodePortCheck.prototype.createServer = function () {
        var _this = this;
        this.setCurrentPort();
        this.server = this.net.createServer();
        this.server.on('error', function (err) {
            if (+_this.options.maxRetries === 0) {
                _this.retryServer = 1;
                return _this.canRetry();
            }
            else {
                if (_this.serverErrors.indexOf(err.code) !== -1) {
                    if (_this.canRetry()) {
                        setTimeout(function () {
                            _this.server.listen(_this.port, _this.options.host);
                        }, 1000);
                    }
                }
                else {
                    throw err;
                }
            }
        });
        this.server.listen(this.port, this.options.host);
        this.server.on('listening', function () {
            _this.output('Server bound to', _this.getHostAndPort());
            _this.isServerBound = true;
            _this.server.close();
            _this.server.unref();
            _this.server.getConnections(function (error, count) {
                if (count === 0) {
                    _this.portAvailable = true;
                }
                _this.finalCallback();
            });
        });
        this.server.on('close', function () {
            if (_this.isServerBound) {
                _this.output('Server closed - port released - done');
            }
        });
    };
    return nodePortCheck;
}());
module.exports = function (options, callback) {
    return new nodePortCheck(options, callback);
};
