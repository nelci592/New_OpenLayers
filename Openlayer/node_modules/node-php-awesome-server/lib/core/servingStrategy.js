"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var ServingStrategy = /** @class */ (function () {
    function ServingStrategy(portList) {
        this.ports = [];
        this._activity = {};
        this._portsInUse = [];
        this._currentPort = 0;
        this._activeRequests = 0;
        this.utils = new utils_1.Utils();
        if (portList instanceof Array) {
            this.ports = portList;
        }
    }
    ServingStrategy.prototype.getPort = function () {
        return this._currentPort;
    };
    ServingStrategy.prototype.activityRequest = function (req) {
        this._activeRequests++;
        var pathname = req.path;
        if (typeof this._activity[pathname] === 'undefined') {
            this._activity[pathname] = [];
        }
        var date = new Date();
        var freePort = utils_1.Utils.getNextAfter(this.ports, this._currentPort);
        this._currentPort = freePort;
        this._activity[pathname].push({
            pathname: pathname,
            targetPort: freePort,
            path: req.url,
            queued: false,
            reqHeaders: req.headers,
            timeStart: date,
            ts: date.getTime()
        });
        this._activity[pathname][this._activity[pathname].length - 1]['index'] = this._activity[pathname].length - 1;
        return this._activity[pathname][this._activity[pathname].length - 1];
    };
    ServingStrategy.prototype.activityResponse = function (res, activityObject) {
        var _this = this;
        var date = new Date();
        this._activity[activityObject.pathname][activityObject.index] = __assign({}, this._activity[activityObject.pathname][activityObject.index], { timeEnd: date, queued: false, te: date.getTime(), resHeaders: res.headers });
        this._portsInUse = this._portsInUse.filter(function (item) { return item !== _this._activity[activityObject.pathname][activityObject.index].targetPort; });
        this._activeRequests--;
        return this._activity[activityObject.pathname][activityObject.index];
    };
    ServingStrategy.prototype.updatePorts = function (portList) {
        this.ports = portList;
    };
    return ServingStrategy;
}());
exports.ServingStrategy = ServingStrategy;
