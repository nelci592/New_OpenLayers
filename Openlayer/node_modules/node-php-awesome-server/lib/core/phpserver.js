"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var PHPServer = /** @class */ (function () {
    function PHPServer(options, workerId, workerPid, instanceNr) {
        this.workerId = workerId;
        this.workerPid = workerPid;
        this.defaultOptions = {};
        this.args = [];
        this.events = require('events');
        this.emitter = new this.events();
        this.php = {};
        this.utils = new utils_1.Utils();
        var spawn = require('child_process').spawn;
        this.options = Object.assign({}, this.defaultOptions, options);
        this.php = spawn(this.options.bin, this.prepareArguments(), {
            stdio: ['pipe', 'pipe', 'pipe']
        });
        /**
         * Assign Worker ID to php instance
         * @type {number}
         */
        this.php.workerId = workerId;
        this.php.workerPid = options.port;
        this.php.instanceNr = instanceNr;
        /**
         * Waiting for the server ...
         */
        this.phpCheck();
        for (var item in this.php) {
            if (this.php.hasOwnProperty(item)) {
                this.emitter[item] = typeof this.php[item] === 'function' ? this.php[item].bind(this) : this.php[item];
            }
        }
    }
    /**
     * Listener
     * @param event
     * @param callback
     */
    PHPServer.prototype.on = function (event, callback) {
        this.emitter.on(event, callback);
        return this;
    };
    /**
     * Format the parameters used for the PHP server and returns an array of arguments
     * @returns {string[] | number[]}
     */
    PHPServer.prototype.prepareArguments = function () {
        /**
         * Add INI values
         */
        if (Object.keys(this.options.ini_set).length) {
            for (var ini_val in this.options.ini_set) {
                this.args.push("-d");
                this.args.push(ini_val + "=\"" + this.options.ini_set[ini_val] + "\"");
            }
        }
        /**
         * Add custom ini config
         */
        if (typeof this.options.ini_config && this.options.ini_config.substr(-4, 4) === '.ini') {
            this.args.push("-c");
            this.args.push(this.options.ini_config);
        }
        /**
         * Add server argument
         */
        this.args.push('-S');
        /**
         * Add server bind address
         */
        this.args.push(this.getBindAddress());
        /**
         * Add document root
         */
        if (this.options.root.length) {
            this.args.push('-t');
            this.args.push(this.options.root.replace(/[/\\]+/g, "/").replace(/[\/\\]$/, ""));
        }
        /**
         * Add router file
         */
        if (this.options.router.length) {
            this.args.push(utils_1.Utils.root("..", "router", "router.wrapper.php"));
        }
        return this.args;
    };
    /**
     * Retrieve a valid format of host and port
     * @returns {string}
     */
    PHPServer.prototype.getBindAddress = function () {
        if (this.options.host.length === 0) {
            this.options.host = this.defaultOptions.host;
        }
        if (this.options.port) {
            if ((this.options.port < 1 || this.options.port > 65535) || isNaN(+this.options.port)) {
                console.log('Invalid port!');
                process.exit(1);
            }
        }
        else {
            this.options.port = 0;
        }
        //return this.options.host + ( this.options.port ? ':' + this.options.port : '');
        return '127.0.0.1' + (this.options.port ? ':' + this.options.port : '');
    };
    /**
     * Check if the PHP server has started and emit 'connect' Event
     * @returns {void}
     */
    PHPServer.prototype.phpCheck = function () {
        var _this = this;
        var net = require('net');
        var netClient = net.createConnection({
            port: +this.options.port
        });
        netClient.on('error', function (err) {
            var errors = ['ECONNREFUSED', 'ECONNRESET'];
            if (errors.indexOf(err) === -1) {
                netClient.unref();
                netClient.destroy();
                return _this.phpCheck();
            }
        });
        netClient.on('connect', function () {
            /**
             * PHP Server is available for use
             */
            _this.emitter.emit('connect', _this.php);
        }).end();
    };
    return PHPServer;
}());
exports.PHPServer = PHPServer;
