<?php

class PHP_Webserver_Router
{

    private $request_uri = "";
    private $physical_file = "";
    private $extension = "";
    private $eTag = "";
    private $eTagHeader = "";
    private $last_modified = "";
    private $if_modified_since = "";
    private $file_length = "";

    var $indexPath = "index.php";

    function __construct()
    {

    }

    /**
     * Prepare variables
     */
    private function init()
    {

        chdir($_SERVER['DOCUMENT_ROOT']);

        $this->request_uri = \filter_input(\INPUT_SERVER, 'REQUEST_URI', \FILTER_SANITIZE_ENCODED);
        $this->request_uri = preg_replace('([/\\\]+)', '/', urldecode($this->request_uri));

        $uri_path = $this->URI_no_query();
        $_SERVER['SCRIPT_NAME'] = $this->format_unix($uri_path == '/' ? DIRECTORY_SEPARATOR . $this->indexPath : $uri_path);
        $_SERVER['PHP_SELF'] = $this->format_unix($uri_path == '/' ? DIRECTORY_SEPARATOR . $this->indexPath : $uri_path);
        $_SERVER['SCRIPT_FILENAME'] = $this->format_unix($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . $_SERVER['PHP_SELF']);

        $this->physical_file = preg_replace('([/\\\]+)', '/', $_SERVER['SCRIPT_FILENAME']);
        $this->extension = strrev(strstr(strrev($this->physical_file), '.', TRUE));

        $this->last_modified = time();
        $this->eTag = md5($this->last_modified);
        $this->file_length = 0;

        if (file_exists($this->physical_file)) {

            $this->last_modified = filemtime($this->physical_file);
            $this->eTag = md5_file($this->physical_file);
            $this->file_length = filesize($this->physical_file);

        }

        $this->if_modified_since = (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? $_SERVER['HTTP_IF_MODIFIED_SINCE'] : false);
        $this->eTagHeader = (isset($_SERVER['HTTP_IF_NONE_MATCH']) ? trim($_SERVER['HTTP_IF_NONE_MATCH']) : false);

    }

    /**
     * Retrieve the mime type of a file
     * @param string $filename
     * @return mixed|string
     */
    private function get_mime_type($filename = "")
    {

        $mime_type_db = $this->retrieve_mime_types();

        /**
         * Custom Type to application/json so you can view it in the browser.
         */
        $mime_type_db['map'] = "application/json";

        if (strlen($filename) == 0) {

            $mime_type = isset($mime_type_db[$this->extension]) ? $mime_type_db[$this->extension] : mime_content_type($this->physical_file);

        } else {

            $extension = strrev(strstr(strrev($filename), '.', TRUE));
            $mime_type = isset($mime_type_db[$extension]) ? $mime_type_db[$extension] : mime_content_type($filename);

        }

        return $mime_type;

    }

    /**
     * Remove query from REQUEST_URI if it has one
     * @return string
     */
    private function URI_no_query()
    {
        $filename = $this->request_uri;

        if (($found = strstr($this->request_uri, "?", TRUE)) != FALSE) {

            $filename = $found;

        }

        return rtrim($filename,'/');

    }

    private function format_unix($str = "")
    {
        return preg_replace('([/\\\]+)', '/', $str);
    }

    /**
     * Listen for requests
     * @return bool|mixed
     */
    function listen()
    {

        //return FALSE;
        //$this->init();

        if (preg_match('/\.(?:php)$/', $_SERVER['SCRIPT_FILENAME'])) {

            return FALSE;

        } else {

            if (!$type = $this->get_mime_type()) {

                return FALSE;

            }

            header('Last-Modified: ' . @gmdate('D, d M Y H:i:s', $this->last_modified) . ' GMT');
            header('ETag: ' . $this->eTag);
            header('Cache-Control: public');
            header('Content-Type: ' . $type);
            header('Content-Length: ' . $this->file_length);

            if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $this->last_modified || $this->eTagHeader == $this->eTag) {

                header('HTTP/1.1 304 Not Modified');

            } else {

                readfile($this->physical_file);

                die();
                //return FALSE;

            }

        }

    }

    /**
     * Load mime types
     * @return array|mixed|object
     */
    private function retrieve_mime_types()
    {

        $mimes_file = dirname(__FILE__) . '/mimes.json';

        if (!file_exists($mimes_file)) {

            $this->create_mime_file();

        }

        return json_decode(file_get_contents($mimes_file), true);

    }

    /**
     * Download and create a mimes.json if you don't have one
     */
    private function create_mime_file()
    {

        $s = array();
        foreach (@explode("\n", @file_get_contents("http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types")) as $x) {

            if (isset($x[0]) && $x[0] !== '#' && preg_match_all('#([^\s]+)#', $x, $out) && isset($out[1]) && ($c = count($out[1])) > 1) {
                for ($i = 1; $i < $c; $i++) {
                    $s[] = '&nbsp;&nbsp;&nbsp;\'' . $out[1][$i] . '\' => \'' . $out[1][0] . '\'';
                }
            }
        }

        $tmp_arr = array();

        foreach ($s as $k => $v) {

            $uri_path = explode('=>', $v);
            $new_key = trim(preg_replace('/\s+/', '', str_replace(array("   '", "'", " ", "	", "   ", '&nbsp;'), "", $uri_path[0])));
            $new_val = trim(str_replace(array("   '", "'"), "", $uri_path[1]));

            $tmp_arr[$new_key] = $new_val;

        }
        ksort($tmp_arr);

        fwrite(fopen(dirname(__FILE__) . '/mimes.json', 'w+'), json_encode($tmp_arr));

    }

}
